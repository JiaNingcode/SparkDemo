import scala.collection.mutable
import scala.collection.mutable.ArrayBuffer

//集合
object Scala_03 extends App {
  val demo = new Seq_List

}

//数组
class ArrayDemo{
  /**
   * 不可变数组
   */
  val arr1 = new Array[Int](10)

  arr1(0) = 0
  arr1(1) = 1

  //可以使用伴生对象的apply方法赋值
  val ints: Array[Int] = Array.apply(1, 2, 3, 4, 5)

  //遍历数组
  // 打印
  println(arr1.toList)

  //循环遍历
  for (elem <- arr1) {
    print(elem+" ")
  }

  for (elem <- 0 until arr1.length){
    print(elem+" ")
  }

  //迭代器遍历
  val iterator: Iterator[Int] = arr1.iterator
  while(iterator.hasNext){
    println(iterator.next())
  }

  //匿名函数遍历
  arr1.foreach(e=>println(e))

  //系统函数遍历
  arr1.foreach(println)

  // 增元素形成新的数组 不能删元素 val arr3 = arr1 :-1 （报错）
  val arr2 = arr1 :+1

  /**
   * 可变数组
   */
  val arr3 : ArrayBuffer[Int] = new ArrayBuffer[Int]()
  val arr4 : ArrayBuffer[Int] = ArrayBuffer(1,2,3)

  arr3.append(1)
  arr3.appendAll(Array(1,3,3,5,6))

  arr3.foreach(println)

  // 更新
  arr3.update(2,1)
  arr3(1) = 100

  //删除
  arr3.remove(0)
  arr4.remove(0,2) //从第0位开始，删两位

  /**
   * arr.toArry    返回结果是一个不可变数组，arr本身没变化
   * arr.toBuffer  返回结果是一个可变数组，arr本身没有变化
   */
  private val buffer: mutable.Buffer[Int] = arr1.toBuffer
  private val array: Array[Int] = arr3.toArray

}

class Seq_List{
  /**
   * 不可变list
   */
  val list1: List[Any] = List(1, 2, 3, "asdf", 'c')
  val list2 = List(1,3,4,5,6,7)

  //list1.foreach(println)

  //增加数据（末尾） :+   （开头增加）   ::
  val list01 = list1 :+ "123"
  val list02 = 100 :: list2
  //list01.foreach(print)

  //合并两个集合 一个集合插入另一个集合中  List(1, 2, 3, asdf, c)134567
  val list03 = list1 :: list2
  //list03.foreach(print)

  //合并两个集合一个集合元素遍历插入另一个中 123asdfc134567
  val list04: List[Any] = list2 ::: list1
  //list04.foreach(print)

  //concat 等价于 :::
  val list05: List[Any] = list1.concat(list2)
  list05.foreach(print)

  /**
   * 可变List
   */


}
